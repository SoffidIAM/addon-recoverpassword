<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?page id="remember_pass_questions" title="User remember password questions"?>
<?taglib uri="/WEB-INF/tld/web/core.dsp.tld" prefix="c" ?>

<zk xmlns:h="http://www.w3.org/1999/xhtml">

	<datamodel id="model" rootNode="challenge"
		src="addon/remember-password/descResetPassword.xml" />

	<style src="/css/localSEU.css" />	

	<zscript>
		<![CDATA[
				import es.caib.zkib.datasource.*;
				
				try
				{
					es.caib.zkib.zkiblaf.Application
						.setTitle(org.zkoss.util.resource.Labels
							.getLabel("rememberPass.zul.Title"));
				}
				catch (Exception ex){}

				com.soffid.iam.addons.rememberPassword.common.RememberPasswordChallenge challenge = null;
				com.soffid.iam.addons.rememberPassword.service.ejb.RememberPasswordUserService ejb ;
				ejb = new javax.naming.InitialContext().
						lookup(com.soffid.iam.addons.rememberPassword.service.ejb.RememberPasswordUserServiceHome.JNDI_NAME);

				void showPolicy ()
				{
					es.caib.seycon.ng.servei.PasswordService ps = es.caib.seycon.ng.ServiceLocator.instance().getPasswordService();
					String dispatcher = ps.getDefaultDispatcher();
					
					String []pds = ps.getPolicyDescription( txt_user.getValue(), dispatcher).split("\n");
					StringBuffer policyDescription = new StringBuffer();
					for (String pd: pds)
					{
						if (pd.startsWith("- "))
							policyDescription.append("    ").append(pd).append("\n");
						else
							policyDescription.append("<LI>").append(pd).append("</LI>");
					}
					policy.setContent("<pre>"+policyDescription.toString()+"</pre>");
	
				}
				
				void show_user_questions()
				{
					String userCode = txt_user.getValue();
					try {
						challenge = ejb.requestChallenge(userCode, null);
						
						Rows rows = grid_user_answers.getRows();
						Iterator it = rows.getChildren().iterator();
						while (it.hasNext()) 
						{
							it.next();
							it.remove ();
						}
						
						it = challenge.getQuestions().iterator();
						while (it.hasNext())
						{
							com.soffid.iam.addons.rememberPassword.common.UserAnswer ua = it.next();
							Row r = new Row();
							Label l  = new Label (ua.getQuestion());
							l.setParent(r);
							Textbox tb = new Textbox();
							tb.setParent(r);
							r.setParent(rows);
						}
					} catch (es.caib.seycon.ng.exception.InternalErrorException e) {
						es.caib.zkib.zkiblaf.Missatgebox.info(org.zkoss.util.resource
								.Labels.getLabel("rememberPass.zul.ObtainQuestionsError") + e.getMessage());
						return;
					} catch (es.caib.seycon.ng.exception.UnknownUserException e) {
						es.caib.zkib.zkiblaf.Missatgebox.info(org.zkoss.util.resource
								.Labels.getLabel("rememberPass.zul.ObtainQuestionsError") + e.getMessage());
						return;
					}
					
					catch (javax.ejb.EJBException ex)
					{
						es.caib.zkib.zkiblaf.Missatgebox.info(org.zkoss.util.resource
								.Labels.getLabel("rememberPass.zul.ObtainQuestionsError") + ex.getMessage());
						return;
					}
					
					user_code_req.setVisible(false);
					user_questions.setVisible(true);
				}
				
				void answerQuestions ()
				{
					Rows rows = grid_user_answers.getRows();
					Iterator it = challenge.getQuestions().iterator();
					Iterator it2 = rows.getChildren().iterator();
					while (it.hasNext())
					{
						Row r = it2.next();
						com.soffid.iam.addons.rememberPassword.common.UserAnswer ua = it.next();
						Textbox tb = r.getChildren().get(1);
						ua.setAnswer(tb.getText());
					}
					try {
						if (ejb.responseChallenge(challenge))
						{
							resetPassword.setVisible(true);
							userName.setValue( txt_user.getValue());
							user_questions.setVisible (false);
							showPolicy ();
						} else {
							es.caib.zkib.zkiblaf.Missatgebox.info(org.zkoss.util.resource
									.Labels.getLabel("rememberPass.zul.IncorrectQuestions"));
						}
					} catch (es.caib.seycon.ng.exception.InternalErrorException e) {
						es.caib.zkib.zkiblaf.Missatgebox.info(org.zkoss.util.resource
								.Labels.getLabel("rememberPass.zul.ObtainQuestionsError") + e.getMessage());
					}
				}
				
				void goBack()
				{
					es.caib.zkib.zkiblaf.Application.goBack();
				}
					
				void changepass()
				{
					// Obtenim els camps actuals
					String contraNova1 = passnueva1.getValue();
					String contraNova2 = passnueva2.getValue();
					
					// Check void passwords
					if ((contraNova == "") || (contraNova2 == ""))
					{
						Missatgebox.error(org.zkoss.util.resource
								.Labels.getLabel("changepass.Omplir"),
							org.zkoss.util.resource.Labels.getLabel("changepass.CanviPWD"));
						return;
					}
					
					// Check new passwords
					if (!contraNova1.equals(contraNova2))
					{
						Missatgebox.error(org.zkoss.util.resource
								.Labels.getLabel("changepass.Coincidir"),
							org.zkoss.util.resource.Labels.getLabel("changepass.CanviPWD"));
						return;
					}

					challenge.setPassword(new es.caib.seycon.ng.comu.Password(contraNova1));
					try
					{
						ejb.resetPassword(challenge);
						if (Missatgebox.confirmaOK(org.zkoss.util.resource
										.Labels.getLabel("changepass.CanviOK"),
									org.zkoss.util.resource.Labels.getLabel("changepass.CanviPWD")))
						{
							session.setAttribute("samlLoginToken", new String [] {
								txt_user.getValue(), 
								challenge.getPassword().getPassword()
							});
							Executions.sendRedirect("/");
						}
					}
					
					catch (es.caib.seycon.ng.exception.BadPasswordException e)
					{
						Missatgebox.error(String.format(org.zkoss.util.resource
									.Labels.getLabel("changepass.PWDAntic4"),
								new Object[] { e.getMessage() }),
							org.zkoss.util.resource.Labels.getLabel("changepass.PWDInvalid"));
					}
					
					catch (es.caib.seycon.ng.exception.InvalidPasswordException e)
					{
						Missatgebox.error(org.zkoss.util.resource
								.Labels.getLabel("changepass.PWDAntic"),
							org.zkoss.util.resource.Labels.getLabel("changepass.PWDInvalid"));
					}
					
					catch (Throwable e)
					{
						System.out.println ("ERROR");
						String msg = e.getMessage();
						msg = (msg != null) ? ": " + msg : "";
						Missatgebox.error(String.format(org.zkoss.util.resource
								.Labels.getLabel("changepass.Error"),
							new Object [] {msg}));
					}
				}
		]]>
	</zscript>

	<div id="main" sclass="login">
		<image src="/anonymous/logo.png" />
		
		<div id="user_code_req" visible="true" class="loginbox">
			<label value="${c:l('rememberPass.zul.IdentifyMessage')}"/>
			
			<separator/>
			
			<div>
				<label id="label_user" value="${c:l('rememberPass.zul.User')}"/>
				<textbox id="txt_user" focus="true" onOK="show_user_questions();"/>
			</div>
			
			<separator/>
			
			<button id="show_remember_password_questions"
				label="${c:l('rememberPass.Titol')}" onClick='show_user_questions()'/>
			<button id="cancel_button" label="${c:l('rememberPass.zul.Cancel')}">
				<attribute name="onClick">
					Executions.sendRedirect("/");
				</attribute>
			</button>
		</div>
		
		<div id="user_questions" visible="false">
			<label value="${c:l('rememberPass.zul.AnswerQuestionMsg')}"/>
			<grid id="grid_user_answers">
				<columns>
					<column label="${c:l('rememberPass.zul.Question2')}"/>
					<column label="${c:l('rememberPass.zul.Answer')}" />
				</columns>
				<rows/>
			</grid>
			
			<button 
				label="${c:l('rememberPass.zul.Recover')}">
				<attribute name="onClick">
					<![CDATA[
					         answerQuestions();
					]]>
				</attribute>
			</button>

			<button id="save_remember_password"
				label="${c:l('rememberPass.zul.Close')}">
				<attribute name="onClick">
					<![CDATA[
						Executions.sendRedirect("/");
					]]>
				</attribute>
			</button>
		</div>
		<div width="100%" id="resetPassword" visible="false">
			<vbox width="100%">
				<hbox style="padding-bottom:5px;" width="100%" widths="50%,50%"> 
					<label sclass="etiqueta" value="${c:l('login.lblUser')}"/>
					<label style="text-weigth:bold;" id="userName"/>
				</hbox>
				<hbox style="padding-bottom:5px;" width="100%" widths="50%,50%">
					<label sclass="etiqueta" value="${c:l('changepass.zul.Novacontrasenya')}"/>
					<textbox id="passnueva1" onOK="passnueva2.setFocus(true);" type="password"/>
				</hbox>
				<hbox style="padding-bottom:5px;" width="100%" widths="50%,50%">
					<label sclass="etiqueta" value="${c:l('changepass.zul.Repeticianovacontras')}"/>
					<textbox id="passnueva2" onOK="changepass()" type="password"/>
				</hbox>
			</vbox>
			
			<div align="center" class="botonera">
				<hbox align="center" style="margin: 0 auto;">
					<button label="${c:l('changepass.zul.Acceptar')}">
						<attribute name="onClick">
							changepass();
						</attribute>
					</button>
					
					<button label="${c:l('changepass.zul.Cancel')}">
						<attribute name="onClick">
							Executions.sendRedirect("/");
						</attribute>
					</button>
				</hbox>
			</div>
			<html id="policy"/>
		</div>
	</div>
</zk>